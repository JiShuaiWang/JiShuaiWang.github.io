<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux Centos 虚拟机配置静态IP]]></title>
    <url>%2F2019%2F10%2F30%2Flinux-VM%2F</url>
    <content type="text"><![CDATA[安装Linux虚拟机后，需要设置固定IP用来SSH访问。以便后续的开发工作。 设置步骤如下 先输入命令【route -n】查看路由地址并记下如果命令route提示“bash: route: command not found” 使用yum命令安装，仅限Center OS yum install net-tools 然后找到网卡配置文件编辑【cd /etc/sysconfig/network-scripts/】 在文件中添加一下配置 IPADDR=192.168.50.130 #希望的ip地址 NETMASK=255.255.255.0 #默认 GATEWAY=192.168.50.2 #之前记下的网关地址 DNS1=192.168.50.2 #和网关一样 然后把以下属性求改为如下 ONBOOT=”yes” # 开机启动 BOOTPROTO=”static” #设置为静态的 service network restart]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM中的年轻代 老年代 持久代 GC]]></title>
    <url>%2F2019%2F10%2F17%2Fjava-gc%2F</url>
    <content type="text"><![CDATA[虚拟机中的共划分为三个代：年轻代（Young Generation）、老年代（Old Generation）和持久代（Permanent Generation）。其中持久代主要存放的是Java类的类信息，与垃圾收集要收集的Java对象关系不大。年轻代和年老代的划分是对垃圾收集影响比较大的。 1.年轻代所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。年轻代分三个区。一个Eden区，两个Survivor区(一般而言)。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个），当这个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制“年老区(Tenured)”。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来 对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。同时，根据程序需要，Survivor区是可以配置为多个的（多于两个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。 2.年老代在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。 3.持久代用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=进行设置。 4.Scavenge GC一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Scavenge GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区。这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。因为大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。 5.Full GC对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个对进行回收，所以比Scavenge GC要慢，因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于FullGC的调节。有如下原因可能导致Full GC：· 年老代（Tenured）被写满· 持久代（Perm）被写满· System.gc()被显示调用·上一次GC之后Heap的各域分配策略动态变化 老年代的内存溢出，说明在容器下的静态文件过多，比如编译的字节码，jsp编译成servlet，或者jar包。 解决此问题，修改jvm的参数 permsize即可，permsize初始默认为64m。 jvm内存参数-vmargs -Xms128M -Xmx512M -XX:PermSize=64M -XX:MaxPermSize=128M-vmargs 说明后面是VM的参数，所以后面的其实都是JVM的参数了-Xms128m JVM初始分配的堆内存-Xmx512m JVM最大允许分配的堆内存，按需分配-XX:PermSize=64M JVM初始分配的非堆内存-XX:MaxPermSize=128M JVM最大允许分配的非堆内存，按需分配 堆(Heap)和非堆(Non-heap)内存 按照官方的说法：“Java 虚拟机具有一个堆，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在 Java 虚拟机启动时创建的。”“在JVM中堆之外的内存称为非堆内存(Non-heap memory)”。 可以看出JVM主要管理两种类型的内存：堆和非堆。简单来说堆就是Java代码可及的内存，是留给开发人员使用的；非堆就是JVM留给自己用的，]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PostgreSQL 创建随机生成颜色代码函数]]></title>
    <url>%2F2019%2F07%2F01%2Fpostgres-sql-hexcolor%2F</url>
    <content type="text"><![CDATA[今天想渲染3D地图的时候，随机从数据库生成颜色代码用于前端渲染。自己写了函数生成颜色代码 创建函数的SQL语句如下create function hexColor() returns varchar as $$with cte1 as (select round(random()*15) as hex1, round(random()*15) as hex2, round(random()*15) as hex3, round(random()*15) as hex4, round(random()*15) as hex5, round(random()*15) as hex6),cte2 as (select case when hex1 = 10 then &#39;A&#39;when hex1 = 11 then &#39;B&#39;when hex1 = 12 then &#39;C&#39;when hex1 = 13 then &#39;D&#39;when hex1 = 14 then &#39;E&#39;when hex1 = 15 then &#39;F&#39;else &#39;F&#39; end as hex1h,case when hex2 = 10 then &#39;A&#39;when hex2 = 11 then &#39;B&#39;when hex2 = 12 then &#39;C&#39;when hex2 = 13 then &#39;D&#39;when hex2 = 14 then &#39;E&#39;when hex2 = 15 then &#39;F&#39;else &#39;F&#39; end as hex2h,case when hex3 = 10 then &#39;A&#39;when hex3 = 11 then &#39;B&#39;when hex3 = 12 then &#39;C&#39;when hex3 = 13 then &#39;D&#39;when hex3 = 14 then &#39;E&#39;when hex3 = 15 then &#39;F&#39;else &#39;F&#39; end as hex3h,case when hex4 = 10 then &#39;A&#39;when hex4 = 11 then &#39;B&#39;when hex4 = 12 then &#39;C&#39;when hex4 = 13 then &#39;D&#39;when hex4 = 14 then &#39;E&#39;when hex4 = 15 then &#39;F&#39;else &#39;F&#39; end as hex4h,case when hex5 = 10 then &#39;A&#39;when hex5 = 11 then &#39;B&#39;when hex5 = 12 then &#39;C&#39;when hex5 = 13 then &#39;D&#39;when hex5 = 14 then &#39;E&#39;when hex5 = 15 then &#39;F&#39;else &#39;F&#39; end as hex5h,case when hex6 = 10 then &#39;A&#39;when hex6 = 11 then &#39;B&#39;when hex6 = 12 then &#39;C&#39;when hex6 = 13 then &#39;D&#39;when hex6 = 14 then &#39;E&#39;when hex6 = 15 then &#39;F&#39;else &#39;F&#39; end as hex6h from cte1)select &#39;#&#39; || ltrim(hex1h) || ltrim(hex2h) || ltrim(hex3h) || ltrim(hex4h) || ltrim(hex5h) || ltrim (hex6h) from cte2;$$ LANGUAGE SQL; 调用如下update tablename set color = hexColor();]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库读写分离，网络访问加速策略]]></title>
    <url>%2F2019%2F05%2F20%2Fdatebase-read-write-1%2F</url>
    <content type="text"><![CDATA[数据库主从模式下，要实现读写分离，需要开发数据访问模块，以下记录数据访问模块实现方式。 数据访问模块实现方案 在Mybatis中开发插件,根据关键字（insert,update,select等）将sql分发到不同的数据源 mycat sharding-jdbc网络访问加速，缓存网站资源反向代理+CDN加速，CDN可以理解为各运营商各地服务器。作用： 加快用户访问响应速度 减轻后端服务器的负载压力消息队列MQ RabbitMQ ActiveMQ Kafaka]]></content>
      <categories>
        <category>数据访问模块</category>
      </categories>
      <tags>
        <tag>数据访问模块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[负载均衡的实现方式]]></title>
    <url>%2F2019%2F05%2F20%2FLoad-Balance-1%2F</url>
    <content type="text"><![CDATA[记录一下负载均衡实现的几种方式 软件实现 Apache、Nginx、Reverse-proxy、pWEB 硬件实现F5 DNS负载均衡]]></content>
      <categories>
        <category>负载均衡</category>
      </categories>
      <tags>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大数据学习路线]]></title>
    <url>%2F2019%2F05%2F07%2Fbd-learning-path%2F</url>
    <content type="text"><![CDATA[大数据整体学习路线]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leaflet加载各类在线地图]]></title>
    <url>%2F2019%2F04%2F30%2Fgis-leaflet-1%2F</url>
    <content type="text"><![CDATA[Leaflet常用的几种在线地图，加载地址如下，后续将陆续分享使用Leaflet开发WebGIS的相关知识。 地图URLvar baseLayers = { "高德地图": L.tileLayer('http://webrd0{s}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}', { subdomains: "1234" }).addTo(map), "高德影像": L.layerGroup([ L.tileLayer('http://webst0{s}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}', { subdomains: "1234" }), L.tileLayer('http://webst0{s}.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&lang=zh_cn&size=1&scale=1&style=8', { subdomains: "1234" }) ]), "天地图": L.layerGroup([ L.tileLayer('http://t{s}.tianditu.cn/DataServer?T=vec_w&X={x}&Y={y}&L={z}', { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }), L.tileLayer('http://t{s}.tianditu.cn/DataServer?T=cva_w&X={x}&Y={y}&L={z}', { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }) ]), "天地图影像": L.layerGroup([ L.tileLayer('http://t{s}.tianditu.cn/DataServer?T=img_w&X={x}&Y={y}&L={z}', { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }), L.tileLayer('http://t{s}.tianditu.cn/DataServer?T=cia_w&X={x}&Y={y}&L={z}', { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }) ]), "天地图地形": L.layerGroup([ L.tileLayer('http://t{s}.tianditu.cn/DataServer?T=ter_w&X={x}&Y={y}&L={z}', { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }), L.tileLayer('http://t{s}.tianditu.cn/DataServer?T=cta_w&X={x}&Y={y}&L={z}', { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }) ]), "Google地图": L.tileLayer('http://mt1.google.cn/vt/lyrs=m@207000000&hl=zh-CN&gl=CN&src=app&x={x}&y={y}&z={z}&s=Galile'), "Google影像": L.layerGroup([ L.tileLayer('http://mt1.google.cn/vt/lyrs=s&hl=zh-CN&gl=CN&x={x}&y={y}&z={z}&s=Gali'), L.tileLayer('http://mt1.google.cn/vt/imgtp=png32&lyrs=h@207000000&hl=zh-CN&gl=cn&x={x}&y={y}&z={z}&s=Galil') ]), "GeoQ ": L.tileLayer('http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineCommunity/MapServer/tile/{z}/{y}/{x}'), "GeoQ 藏蓝": L.tileLayer('http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}'), "GeoQ 灰": L.tileLayer('http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetGray/MapServer/tile/{z}/{y}/{x}') };]]></content>
      <categories>
        <category>GIS</category>
        <category>Leaflet</category>
      </categories>
      <tags>
        <tag>GIS</tag>
        <tag>Leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux虚拟机网卡重启出现 Failed to Start LSB异常]]></title>
    <url>%2F2019%2F04%2F29%2Flinux-q1%2F</url>
    <content type="text"><![CDATA[今天启动Linux虚拟机发现IPV4地址丢失，配置完IP后重启网卡出现 Failed to start LSB异常 解决方案(执行以下步骤) systemctl stop NetworkManager systemctl disable NetworkManager service network restart]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻找.李志]]></title>
    <url>%2F2019%2F04%2F29%2Fmusic-find-lizhi%2F</url>
    <content type="text"><![CDATA[即将三十而立的年纪，走在人生的十字路口，不停的寻找生命的意义。 大帅寻找 我在恶心的世界里，寻找一个像你的人在每个想你的夏天里，等另一种感情我在失败的生活里，寻找一个爱我的人我的悲伤，浪漫和幻想，不对她说起我再也不会把自己，愚蠢的交给过去我的生活和我的想法，从此相隔了万里我整夜整夜地失眠，不是为了和谁再相见曾经爱你的每一条街，是我新鲜生活的起点我在陌生的感动里，寻找一个像你的人就算像过去一样被误解，不快乐又如何我在干裂的春天里，寻找一个平凡的人她的善良，甜蜜和阳光，陪伴我自己我再也不会把自己，彻底的交给一个人我的理想就像这黑夜，一分一秒的断裂我一天一天地发呆，不是为了酝酿些什么真情早已经被他们毁灭，还有什么不能去拒绝是否你也在沉默里，寻找一个像我的人在每个想我的季节里，和他们在一起]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搞清楚Spark、Storm、MapReduce的区别]]></title>
    <url>%2F2019%2F04%2F29%2Fbd-spark-mapreduce%2F</url>
    <content type="text"><![CDATA[很多初学者在刚刚接触大数据的时候会有很多疑惑，比如对MapReduce、Storm、Spark三个计算框架的理解经常会产生混乱。哪一个适合对大量数据进行处理？哪一个又适合对实时的流数据进行处理？又该如何来区分他们呢？我对比整理了这3个计算框架的基本知识，大家可以了解一下以便对这个3个计算框架有一个整体的认识。 1. MapReduce-分布式离线计算框架主要适用于大批量的集群任务，由于是批量执行，故时效性偏低。原生支持 Java 语言开发 MapReduce ，其它语言需要使用到 Hadoop Streaming 来开发。 2. Spark-快速通用的计算引擎Spark 是专为大规模数据处理而设计的快速通用的计算引擎，其是基于内存的迭代式计算。Spark 保留了MapReduce 的优点，而且在时效性上有了很大提高，从而对需要迭代计算和有较高时效性要求的系统提供了很好的支持。开发人员可以通过Java、Scala或者Python等语言进行数据分析作业编写，并使用超过80种高级运算符。Spark与HDFS全面兼容，同时还能与其它Hadoop组件—包括YARN以及HBase并行协作。Spark可以被用于处理多种作业类型，比如实时数据分析、机器学习与图形处理。多用于能容忍小延时的推荐与计算系统。 3. Storm-分布式实时大数据处理系统Storm是一个分布式的、可靠的、容错的流式计算框架。Storm 一开始就是为实时处理设计，因此在实时分析/性能监测等需要高时效性的领域广泛采用。Storm在理论上支持所有语言，只需要少量代码即可完成适配。Storm把集群的状态存在Zookeeper或者本地磁盘，所以后台进程都是无状态的（不需要保存自己的状态，都在zookeeper上），可以在不影响系统健康运行的同时失败或重启。Storm可应用于–数据流处理、持续计算（持续地向客户端发送数据，它们可以实时的更新以及展现数据，比如网站指标）、分布式远程过程调用（轻松地并行化CPU密集型操作）。]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谁明浪子心]]></title>
    <url>%2F2019%2F04%2F12%2Fmusic-wangjie%2F</url>
    <content type="text"><![CDATA[愿一生勇敢且温柔，有爱可寻亦有梦可追。 可以笑的话不会哭可找到知己哪会孤独偏偏我永没有遇上问我一身足印的风霜怎可结束可以爱的话不退缩可相知的心哪怕追逐可惜每次遇上热爱无法使我感觉我终于遇上幸福你说爱我等于要把我捕捉实在无法担起这一种爱在这夜我又再度漂泊你的痴情请勿继续请你收起一切相信这晚是结局听说太理想的恋爱总不可接触我却哪管千山走遍亦要设法去捕捉听说太理想的一切都不可接触我再置身寂寞路途在那里会有幸福幸福家与国的梦不结束偏偏一颗心抗拒屈服必须要确实领略到就算一生一世也甘心没有局促你说爱我等于要把我捕捉实在无法担起这一种爱在这夜我又再度漂泊你的痴情请勿继续请你收起一切相信这晚是结局听说太理想的恋爱总不可接触我却哪管千山走遍亦要设法去捕捉听说太理想的一切都不可接触我再置身寂寞路途在那里会有幸福听说太理想的恋爱总不可接触我却哪管千山走遍亦要设法去捕捉听说太理想的一切都不可接触我再置身寂寞路途在那里会有幸福幸福]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
</search>
